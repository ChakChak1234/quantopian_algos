import quantopian.optimize as opt
import quantopian.algorithm as algo

def initialize(context):
    set_slippage(slippage.VolumeShareSlippage(volume_limit=0.025, price_impact=0.1)) # Default
    set_commission(commission.PerShare(cost=0.005, min_trade_cost=1.0)) # FSC for IB
    
    context.leveragedetfs= [sid(38532), sid(38292)]
    
    schedule_function(my_rebalance,
                      date_rules.month_end(),
                      time_rules.market_open(hours=1))
 
def my_rebalance(context,data):
    stock_dict = {}
    today = get_datetime()  
    if today.month == 1 or today.month == 4 or today.month == 7 or today.month == 10:
        for stock in context.leveragedetfs:
            stock_dict[stock] = -1.0 / len(context.leveragedetfs)
        
        try:
            objective = opt.TargetWeights(stock_dict)
            constraints=[opt.MaxGrossExposure(1.0)]
            algo.order_optimal_portfolio(objective, constraints) 
        except Exception as e:
            log.info('@@@@@@@@@@@@@@@@@@@ EXCEPTION: Trade @@@@@@@@@@@@@@@@@@@@@')
            log.info('Exception is %s' %e)
        return
 
def handle_data(context,data):
    pass